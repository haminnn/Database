--내가 원하는 컬럼만 보고 싶을때
select empno, ename
from emp;

spool c:\temp\db_01_27.txt

select deptno
from emp;

--중복열 제거하고 출력해주는 distinct, 원본 데이터가 훼손되지 않는다.
select distinct deptno
from emp;

select distinct job,deptno
from emp;

insert into salgrade values
(1, 700, 1200);
insert into salgrade values
(2, 1201, 1400);
insert into salgrade values
(3, 1401, 2000);
insert into salgrade values
(4, 2001, 3000);


--emp테이블 전체 행 삭제할때는 delete를 사용, 테이블의 속성과 타입은 살아있다.
delete from emp;
--테이블 자체 삭제는 drop table emp;를 해주어야 한다.

select ALL job,deptno
from emp;

select ename, sal, sal*12+comm
from emp;
-- 연봉이라는 컬럼을 추가로 출력시키면서 컬렴명을 annsal이라고 별칭(alias) 지정할때
select ename, sal, sal*12+comm annsal
from emp;

--order by 오더바이 뒤에 아무것도 안쓰면 default 값이 오름차순이다. 뒤에 컬럼만 써주면 default 값이 오름차순이기에
--내림차순 해주고 싶으면 컬럼 뒤에 desc를 붙혀주어야 한다.
select *
from emp
order by sal;

select*
from emp
order by sal desc;

--내림차순과 오름차순을 한번에할때
select *
from emp
order by deptno asc, sal desc;

--필요한 데이터만 출력하는 where
--관계형 DBMS는 입출력이 전부 table이다.
select *
from emp
where deptno = 30;

select *
from emp
where deptno = 30
and job = 'SALESMAN';

select *
from emp
where deptno = 30
or job = 'CLERK';

select *
from emp
where sal*12 = 36000;

--급여가 3000이상인 사원 출력
select *
from emp
where sal >=3000;

--문자를 대소비교 연산자로 비교(비교문자열이 문자 하나일때)
select *
from emp
where ename >='F';

--비교문자열이 여러 개일때
select *
from emp
where ename <= 'FORZ' ;

--값이 서로 같지 않을 경우 true, 같은 경우에 false
select *
from emp
where sal != 3000;

select *
from emp
where sal <> 3000;

select *
from emp
where sal ^= 3000;

select *
from emp
where not sal = 3000;

--or 연산자 사용해서 여러 조건 넣기
select *
from emp
where job = 'MANAGER'
or job = 'SALESMAN'
or job = 'CLERK';

--IN연산자 사용
select *
from emp
where job in ('MANAGER', 'SALESMAN', 'CLERK');

--IN연산자와 논리부정 연산자 사용
select *
from emp
where job not in ('MANAGER', 'SALESMAN', 'CLERK');

--대소비교와 AND연산자를 사용
select *
from emp
where sal >= 2000
and sal <= 3000;

--between a and b 
select *
from emp
where sal between 2000 and 3000;

--not between a and b
select *
from emp
where sal not between 2000 and 3000;

--패턴 비교 like연산자 사용
select *
from emp
where ename like'S%';
--ename 컬럼에서 S로시작하는 모든데이터

select *
from emp
where ename like '_L%';
--ename 컬럼에서 2번째 문자가 L인 모든데이터

select *
from emp
where ename like '%A%';
--ename 컬럼에서 A가 들어가는 모든데이터

--지금까지 하는 select문들은 DML인데 query(질의어)라고한다. 반드시 커밋을 해야 한다.
--ex)select문 , insert into emp values (1,'...'); , update
--create table ~~~~문은 DDL이다. 커밋을 해주지 않아도 저장이 된다.
--ex)create table emp (empno number(4) constraint pk_... primary key, ...); , alter table emp add name... type...;
--관리자로 접속해서 접속권한을 부여해주는 grant가 DCL이다. DBA(데이터베이스 관리자)가 권한을 다 가지고있다.
--ex)grant resource, connect to scott;

-- 별칭사용하여 열 출력
select ename, sal, sal*12+comm annsal, comm
from emp;

--null은 0이 아니라 값이 정해지지 않았거나 모를때 null이다.
select *
from emp
where comm = null;
--이렇게쓰면 값이 null인걸 비교하는거기 때문에(일반 연산자 사용은 무의미) is null을 써야 한다.
select *
from emp
where comm is null;
--null이 아닌 값이 있을 때는 not을 붙힌다.
select *
from emp
where not comm is null;
--is not null;이라고 해도됨

select *
from emp
where mgr is not null;

select *
from emp
where sal > null
or comm is null;

select *
from emp
where sal > null
and comm is null;

--집합연산자
--중복이 제거된 교집합 union
select empno, ename, sal, deptno
from emp
where deptno = 10
union
select empno, ename, sal, deptno
from emp
where deptno =20;

--중복이 제거되지 않은 교집합 union all
select empno, ename, sal, deptno
from emp
where deptno = 10
union all
select empno, ename, sal, deptno
from emp
where deptno =10;

--차집합 minus
select empno, ename, sal, deptno
from emp
minus
select empno, ename, sal, deptno
from emp
where deptno =10;

--먼저 작성한 select문과 결과값이 같은 교집합
select empno, ename, sal, deptno
from emp
intersect
select empno, ename, sal, deptno
from emp
where deptno =10;

--연습문제4_2
select distinct job
from emp;

--연습문제4_3
select empno employee_no, ename employee_name, job, mgr salary, hiredate, sal salary, comm commission, deptno department_no
from emp
order by department_no desc, employee_name asc;

select empno employee_no, ename employee_name, job, mgr salary, hiredate, sal salary, comm commission, deptno department_no
from emp
order by deptno desc, ename asc;
--오름차순 내림차순을 할때 별칭을 써도되고 원래 컬럼명을 써도 된다.

--연습문제5_1
select *
from emp
where ename like ('%S');

--연습문제5_2
select empno, ename, job, sal, deptno
from emp
where deptno = 30 and job in ('MANAGER');

--연습문제5_3
--집합연산자를 사용하지 않았을 때
select empno, ename, job, sal, deptno
from emp
where (deptno = 20 or deptno = 30) and sal > 2000;

--집합연산자를 사용했을 때
select empno, ename, job, sal, deptno
from emp
where deptno in (20, 30)
intersect
select empno, ename, job, sal, deptno
from emp
where sal > 2000;

--연습문제5_4
select *
from emp
where sal > 3000 or sal < 2000;

--연습문제5_5
select ename, empno, sal, deptno
from emp
where ename like ('%E%') and deptno = 30 and (not sal between 1000 and 2000);

연습문제5_6
select *
from emp
where comm is null and mgr is not null and job in ('MANAGER', 'CLERK') and ename not like ('_L%');

--update 데이터베이스에 들어있는 튜플을 바꿀때 쓰는방식
-- update 테이블이름
-- set 필드이름 = 값 (바꿀 필드명과 수정하고싶은 값으로 써줘야 한다)
-- where 조건; (where문이 없으면 set에 적어준 필드명이 모두 수정하고 싶은 값으로 바뀌어 버린다.)
--ex)set deptno = 30; 이렇게 하면 deptno컬럼의 모든 튜플값이 30으로 바뀐다.

update emp
set deptno = 30
where ename = 'ALLEN';

--기존에 있던 테이블에 컬럼추가할때
alter table emp
add age number;

update emp
set age = 30;

--기존에 있던 테이블에서 특정 컬럼지울때
alter table emp
drop column age ;

--토드 데이터 모델러 사용할때
--entity를 만들어서 table을 만들고 기본키를 지정해준 후
--non identifying relationship을 눌러서 부모테이블과 자식테이블을 연결해준다.
--연결해주면 부모테이블의 기본키가 자동적으로 자식테이블의 외래키로 설정이 된다.
--모델을 눌러서 generate DDL script 눌러서 run 을 눌러 준후에
--location of sql file 파일위치경로를 제대로 잡아준다
-- detail settings 에서 use quotation marks 체크 해체하고 터미네이터에 /를 ;로바꾼다
--show code를 눌러보면 만들어진 테이블의 코드를 다 볼수 있다.

